#Keep Coding And change the world and do not forget anything... Not Again..
from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.gesture import Gesture,GestureDatabase
from kivy.graphics import Line,Ellipse

class GestureRecorder(FloatLayout):
    e=None
    def on_touch_down(self, touch):
        self.points = [touch.pos]
        with self.canvas:
            self.e = Ellipse(pos=(touch.x-5,touch.y-5),size=(10,10))
            self.Line = Line(points=(touch.x,touch.y))

    def on_touch_move(self, touch):
        self.canvas.remove(self.e)
        self.e = Ellipse(pos=(touch.x - 5, touch.y - 5), size=(10, 10))
        self.canvas.add(self.e)
        self.points+=[touch.pos]
        self.Line.points+=[touch.x,touch.y]

    def on_touch_up(self, touch):
        self.canvas.remove(self.e)
        self.points+=[touch.pos]
        gesture = Gesture()
        gesture.add_stroke(self.points)
        gesture.normalize()
        gdb = GestureDatabase()
        print "Gesture : " + gdb.gesture_to_str(gesture).decode(encoding='UTF-8')

line45_str = "eNq1l01uG0cQhfdzEWnjQf1X9wXobQAdIFAkQhJsSIRIx/Ht87pID72IwjDAQBQlzLx+/fNVV1ffvnx5+fPH/LTdH769b6fPp787mm4fdzzd3ewP729ftvubaSfT7dedTrf/2OKuZNPORjtHu93by+thNIvRLD9o9ttQTbs2WnW0+oEGTNPmE82eKs17N2VJc532dzd/jddcr4Oau1NIE1X3Nu3/uP/XPlhqSjo9nTqwlsKt9a7owxkOTydvF5OezSPYupJe9q5ps6/iHeWdi7d0VhPMPJq6wOZsrtRFSJylQyKel91r6bmv4y4VRsIruRdR0ZXci6n4Su5FVVaiKkVVVqKqRVXPVNkzW4804iQ37LHFnVu3FioRjc06+WX3oqq6kntRVV/JvahqruReVPVMlZy6ZYZS05bIKGd3PCEPTrakRkFy0d2KqvFK7kXVdCX3omq+kntRtRNVkLPBtJOBn5At2R1vOJxIo7t1pPe8vJesmFpfw9uLqPMq3sXTdRXvYxHhq3gXS1+FpRdLX1iKNJKmmtFQrSAKF28hZIRuQeZNkBvioncUy+BVvItl6CrexTIWlpLNkO9C6rRhPlundnSKDsLa+O+ydaGMXMO6SMZCEmmEHSFADRVpUi7WyoFk0vn05ZcXJAtkLiBVUSuSIPy4S2BbLdbeGCUua6Qq/4dBZ2FM/V/OKK73D+/b7etSt6dV4e7T7UaiYxFlTBCVQuKU2+A4mwnBgeYddo7a97DLmO6vUOdV6naVul+jblTqFLzKxgGqjsgfah0ZQg3gu+A4iaHmUjebWZQpevOmqLU2WNSZE5V/Mo8ARHEPtQy1CrzxZYLDp6EWmzbCfU5Sx90GZVfDm6HWUhu61cA9gYQI4Qw1HuH3/Cm1lTp4bshSHhm4L3Ua8kB/iazVkNSIsV+H3Evec6ZorbGMzCcy5HjG2DfoqhEuLS2HvGiiZplRIaqSaFdsIciVGYNB9OD4ZER+jaVomtiMBWw4f8fZioyIqSOX4hqEixBMDJE41EUT05iXJVGE5FD7rCiVEJciqItqIP0o7nNEwtYtAAihDD/Msllg42GE4WMgvWCa8RzjCuZIYjAco1bGJH8Z9vDufFTLnDVAxAeuZSNShjxQQyALUqcYux5yOcp17r+OZagF7BEmiLVEpgBhqPWotjmt2c9oiY/UdlT7WC5EBAOD9g/V/lPtSoTFOY7nI3Vcpc6r1O0qNWAe8833l8fDc933aey0mHH3QOgZcI4Me3dzePu6fb9/fdiW6Hgoj+en9Pf77v3t8dvDod7KtBmrHE1wjovjR0v7vH15ej5KEAKMbYHf5TNqv/lv5h9KOQ=="
circle_str = "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"
cross_str = "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"
class GestureRecorderApp(App):
    def build(self):
        return GestureRecorder()

#GestureRecorderApp().run()
